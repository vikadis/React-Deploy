{"version":3,"sources":["mason.png","Video.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Video","props","state","switch","style","height","marginTop","src","frameborder","allow","allowfullscreen","title","width","React","Component","GlobalStyles","createGlobalStyle","ms_sans_serif","ms_sans_serif_bold","styleReset","App","className","theme","original","logo","alt","resizable","variant","size","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,mC,kSCEtBC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAQ,GAHO,E,qDAQjB,OACE,yBAAKC,MAAO,CAACC,OAAQ,IAAKC,UAAW,KACnC,4BACEC,IAAI,4CACJC,YAAY,IACZC,MAAM,4BACNC,iBAAe,EACfC,MAAM,QACNC,MAAM,MACNP,OAAO,a,GAlBkBQ,IAAMC,W,2ZCkBzC,IAAMC,EAAeC,YAAH,IAGFC,IAMAC,IAOZC,KA4CWC,MAvCf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACN,EAAD,MACE,kBAAC,IAAD,CAAeO,MAAOC,KACpB,4BAAQF,UAAU,cAChB,yBAAKd,IAAKiB,IAAMH,UAAU,WAAWI,IAAI,SACzC,kBAAC,IAAD,CAAQC,WAAS,EAACL,UAAU,UAClC,kBAAC,IAAD,CAAcA,UAAU,iBACtB,yDACA,kBAAC,IAAD,KACE,0BAAMA,UAAU,iBAGpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQM,QAAQ,OAAOC,KAAK,MAA5B,QAGA,kBAAC,IAAD,CAAQD,QAAQ,OAAOC,KAAK,MAA5B,QAGA,kBAAC,IAAD,CAAQD,QAAQ,OAAOC,KAAK,KAAKC,UAAQ,GAAzC,SAIF,kBAAC,IAAD,KACA,kBAAC,EAAD,YCvDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.59128fba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mason.ef136841.png\";","import React from 'react';\n\nexport default class Video extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      switch: true,\n    }\n  }\n\n  render() {\n    return (\n      <div style={{height: 400, marginTop: 70}}>\n        <iframe \n          src='https://www.youtube.com/embed/xapEwCh-9Zc'\n          frameborder='0'\n          allow='autoplay; encrypted-media'\n          allowfullscreen\n          title='video'\n          width='500'\n          height='300'\n        />\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { styleReset, List, ListItem, Divider,\n  Window,\n  WindowContent,\n  WindowHeader,\n  Button,\n  Toolbar,\n  Panel } from 'react95';\n// pick a theme of your choice\nimport original from \"react95/dist/themes/original\";\n// original Windows95 font (optionally)\nimport ms_sans_serif from \"react95/dist/fonts/ms_sans_serif.woff2\";\nimport ms_sans_serif_bold from \"react95/dist/fonts/ms_sans_serif_bold.woff2\";\n\n// import logo from './moon.jpeg';\nimport logo from './mason.png';\nimport './App.css';\nimport Video from './Video.jsx';\n\nconst GlobalStyles = createGlobalStyle`\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif}') format('woff2');\n    font-weight: 400;\n    font-style: normal\n  }\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif_bold}') format('woff2');\n    font-weight: bold;\n    font-style: normal\n  }\n  body {\n    font-family: 'ms_sans_serif';\n  }\n  ${styleReset}\n`;\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyles />\n        <ThemeProvider theme={original}>\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <Window resizable className='window'>\n      <WindowHeader className='window-header'>\n        <span>California Drone Video </span>\n        <Button>\n          <span className='close-icon' />\n        </Button>\n      </WindowHeader>\n      <Toolbar>\n        <Button variant='menu' size='sm'>\n          File\n        </Button>\n        <Button variant='menu' size='sm'>\n          Edit\n        </Button>\n        <Button variant='menu' size='sm' disabled>\n          Save\n        </Button>\n      </Toolbar>\n      <WindowContent>\n      <Video/>\n      </WindowContent>\n      {/* <Panel variant='well' className='footer'>\n        Put some useful informations here\n      </Panel> */}\n    </Window>\n            \n          </header>\n        </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}